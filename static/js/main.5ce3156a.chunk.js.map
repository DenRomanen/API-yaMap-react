{"version":3,"sources":["components/PlaceMark/PlacesMark.jsx","utils/gettingData.js","utils/config.js","components/ClustererMark/ClustererMark.jsx","components/MapKazan/MapKazan.jsx","components/Yamap.jsx","App.jsx","serviceWorker.js","index.js"],"names":["PlacesMark","state","points","elem","axios","get","then","response","console","log","data","catch","error","setState","this","map","element","ind","lat","categories","some","findRestaurant","key","geometry","lng","properties","iconContent","hintContent","wikipedia_title","balloonContentHeader","title","balloonContent","image","facebook_rating","tripAdvisor_rating","options","iconColor","modules","React","Component","ClustererMark","gridSize","minClusterSize","margin","MapKazan","defaultState","center","zoom","width","height","MapRender","id","App","men","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"whBAyEeA,E,2MApEbC,MAAQ,CACNC,OAAQ,M,8EAGKC,GACb,MAAgB,eAATA,I,0CAGY,IAAD,OCTbC,IACJC,ICLuB,qBDMvBC,MAAK,SAAAC,GAEJ,OADAC,QAAQC,IAAIF,EAASG,MACdH,EAASG,QAEjBC,OAAM,SAAAC,GAAK,OAAIJ,QAAQC,IAAIG,MDIdN,MAAK,SAAAI,GACjB,EAAKG,S,yVAAL,IAAmB,EAAKZ,MAAxB,CAA+BC,OAAQQ,U,+BAIjC,IAAD,OACP,OAA0B,OAAtBI,KAAKb,MAAMC,OACNY,KAAKb,MAAMC,OAAOa,KAAI,SAACC,EAASC,GAGrC,OAFAT,QAAQC,IAAIO,EAAQE,KAEhBF,EAAQG,WAAWC,KAAK,EAAKC,gBAE7B,kBAAC,IAAD,CACEC,IAAKL,EACLM,SAAU,CAACP,EAAQE,IAAKF,EAAQQ,KAChCC,WAAY,CACVC,YAAaT,EAAM,EACnBU,YAAaX,EAAQY,gBACrBC,qBAAsBb,EAAQc,MAC9BC,eAAgB,CAAC,sCAAD,OACwBf,EAAQc,MADhC,iBAC8Cd,EAAQgB,MADtD,wGAEDhB,EAAQG,WAFP,yFAGKH,EAAQiB,gBAHb,6FAIQjB,EAAQkB,mBAJhB,YAOlBC,QAAS,CACPC,UAAW,OAEbC,QAAS,CAAC,0BAA2B,0BAKvC,kBAAC,IAAD,CACEf,IAAKL,EACLM,SAAU,CAACP,EAAQE,IAAKF,EAAQQ,KAChCC,WAAY,CACVC,YAAaT,EAAM,EACnBU,YAAaX,EAAQY,gBACrBC,qBAAsBb,EAAQc,MAC9BC,eAAgB,CAAC,sCAAD,OACwBf,EAAQc,MADhC,iBAC8Cd,EAAQgB,MADtD,0FAEChB,EAAQG,WAFT,2FAGOH,EAAQiB,gBAHf,+FAIUjB,EAAQkB,mBAJlB,YAOlBG,QAAS,CAAC,0BAA2B,6BAMtC,S,GAhEYC,IAAMC,WGYhBC,EAZO,kBACpB,kBAAC,IAAD,CACEL,QAAS,CACPM,SAAU,GACVC,eAAgB,EAChBC,OAAQ,IAGT,kBAAC,EAAD,QCSUC,EAjBE,kBACf,6BACE,kBAAC,IAAD,CACEC,aAAc,CACZC,OAAQ,CAAC,OAAQ,QACjBC,KAAM,IAGRC,MAAO,IACPC,OAAQ,KAER,kBAAC,IAAD,MACA,kBAAC,EAAD,SCHSC,EARG,kBAChB,6BACE,kBAAC,IAAD,CAAOC,GAAG,SACR,kBAAC,EAAD,SCYSC,E,2MAdbnD,MAAQ,CACNoD,IAAK,0F,wEAIL,OACE,yBAAKC,UAAU,QACb,gCAAMxC,KAAKb,MAAMoD,KACjB,kBAAC,EAAD,W,GATUf,IAAMC,WCOJgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5D,MAAK,SAAA6D,GACjCA,EAAaC,kB","file":"static/js/main.5ce3156a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Placemark } from \"react-yandex-maps\";\r\nimport { gettingData } from \"../../utils/gettingData\";\r\n\r\nclass PlacesMark extends React.Component {\r\n  state = {\r\n    points: null\r\n  };\r\n\r\n  findRestaurant(elem) {\r\n    return elem === \"Restaurant\";\r\n  }\r\n\r\n  componentDidMount() {\r\n    gettingData().then(data => {\r\n      this.setState({ ...this.state, points: data });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.points !== null) {\r\n      return this.state.points.map((element, ind) => {\r\n        console.log(element.lat);\r\n\r\n        if (element.categories.some(this.findRestaurant)) {\r\n          return (\r\n            <Placemark\r\n              key={ind}\r\n              geometry={[element.lat, element.lng]}\r\n              properties={{\r\n                iconContent: ind + 1,\r\n                hintContent: element.wikipedia_title,\r\n                balloonContentHeader: element.title,\r\n                balloonContent: [\r\n                  `<img class=\"placeMark__image\" alt=\"${element.title}\" src=${element.image}>                \r\n             <div>Категория: ${element.categories}</div>\r\n             <div>Рейтинг facebook ${element.facebook_rating}</div> \r\n             <div>Рейтинг tripAdvisor ${element.tripAdvisor_rating}</div>`\r\n                ]\r\n              }}\r\n              options={{\r\n                iconColor: \"red\"\r\n              }}\r\n              modules={[\"geoObject.addon.balloon\", \"geoObject.addon.hint\"]}\r\n            />\r\n          );\r\n        } else {\r\n          return (\r\n            <Placemark\r\n              key={ind}\r\n              geometry={[element.lat, element.lng]}\r\n              properties={{\r\n                iconContent: ind + 1,\r\n                hintContent: element.wikipedia_title,\r\n                balloonContentHeader: element.title,\r\n                balloonContent: [\r\n                  `<img class=\"placeMark__image\" alt=\"${element.title}\" src=${element.image}>\r\n               <div>Категория: ${element.categories}</div>\r\n               <div>Рейтинг facebook ${element.facebook_rating}</div> \r\n               <div>Рейтинг tripAdvisor ${element.tripAdvisor_rating}</div>`\r\n                ]\r\n              }}\r\n              modules={[\"geoObject.addon.balloon\", \"geoObject.addon.hint\"]}\r\n            />\r\n          );\r\n        }\r\n      });\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default PlacesMark;\r\n","import axios from \"axios\";\r\nimport { KAZAN_PlACES } from \"./config.js\";\r\n\r\nexport const gettingData = () => {\r\n  return axios\r\n    .get(KAZAN_PlACES)\r\n    .then(response => {\r\n      console.log(response.data);\r\n      return response.data;\r\n    })\r\n    .catch(error => console.log(error));\r\n};\r\n","export const KAZAN_PlACES = \"./data/Kazan.json\";\r\n","import React from \"react\";\r\nimport { Clusterer } from \"react-yandex-maps\";\r\nimport PlacesMark from \"../PlaceMark/PlacesMark.jsx\";\r\n\r\nconst ClustererMark = () => (\r\n  <Clusterer\r\n    options={{\r\n      gridSize: 50,\r\n      minClusterSize: 2,\r\n      margin: 5\r\n    }}\r\n  >\r\n    {<PlacesMark />}\r\n  </Clusterer>\r\n);\r\n\r\nexport default ClustererMark;\r\n","import React from \"react\";\r\nimport { Map, ZoomControl } from \"react-yandex-maps\";\r\nimport ClustererMark from \"../ClustererMark/ClustererMark.jsx\";\r\n\r\nconst MapKazan = () => (\r\n  <div>\r\n    <Map\r\n      defaultState={{\r\n        center: [55.785, 49.115],\r\n        zoom: 13\r\n        // behaviors: [\"drag\"]\r\n      }}\r\n      width={800}\r\n      height={500}\r\n    >\r\n      <ZoomControl />\r\n      <ClustererMark />\r\n    </Map>\r\n  </div>\r\n);\r\n\r\nexport default MapKazan;\r\n","import React from \"react\";\r\nimport { YMaps } from \"react-yandex-maps\";\r\n\r\nimport MapKazan from \"./MapKazan/MapKazan.jsx\";\r\n\r\nconst MapRender = () => (\r\n  <div>\r\n    <YMaps id=\"yaMap\">\r\n      <MapKazan />\r\n    </YMaps>\r\n  </div>\r\n);\r\n\r\nexport default MapRender;\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport MapRender from \"./components/Yamap.jsx\";\n\nclass App extends React.Component {\n  state = {\n    men: \"Объекты на карте\"\n  };\n\n  render() {\n    return (\n      <div className=\"body\">\n        <h1> {this.state.men}</h1>\n        <MapRender />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}